// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// migrateCommand: npx prisma migrate dev --name init
// npx prisma db push
// npx prisma migrate dev --create-only

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int           @id @default(autoincrement())
  first_name String
  last_name  String
  email      String        @unique
  password   String
  created_at DateTime      @default(now())
  updated_at DateTime      @default(now())
  address    UserAddress[]
  payment    UserPayment[]
  cart       Cart[]
  Order      Order[]
}

enum PaymentStatus {
  initiate
  success
  failled
  pending
  refund_intiate
  refunded
}

enum OrderStatus {
  shipped
  cancelled
  declined
  refunded
  partially_refunded
}

enum AddressType {
  home
  work
  other
}

model UserAddress {
  id           Int         @id @default(autoincrement())
  user_id      Int
  country      String
  state        String
  city         String
  street       String
  postal_code  Int
  address_type AddressType
  mobile       String      @unique
  user         User     @relation(fields: [user_id], references: [id])
}

model Product {
  id              Int               @id @default(autoincrement())
  category_id     Int
  title           String
  price           Float
  description     String?
  image           String
  rating          String
  categories      Category[]
  ProductCategory ProductCategory[]
  Cart            Cart[]
}

model Category {
  id              Int               @id @default(autoincrement())
  title           String            @unique
  parent_category String?
  description     String?
  products        Product[] // Many-to-many relationship with Product
  ProductCategory ProductCategory[]
}

model ProductCategory {
  product_id  Int
  category_id Int
  product     Product  @relation(fields: [product_id], references: [id])
  category    Category @relation(fields: [category_id], references: [id])
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())

  @@id([product_id, category_id])
}

model Cart {
  id         Int      @id @default(autoincrement())
  user_id    Int
  product_id Int      @unique
  quantity   Int
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
  user       User     @relation(fields: [user_id], references: [id])
  product    Product  @relation(fields: [product_id], references: [id])
}

model UserPayment {
  id             Int           @id @default(autoincrement())
  user_id        Int
  transaction_id String        @unique
  method         String
  status         PaymentStatus // initiate,success,failled ,pending,refund_intiate,refunded
  amount         Int
  created_at     DateTime      @default(now())
  updated_at     DateTime      @default(now())
  user           User          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Order {
  id           Int            @id @default(autoincrement())
  user_id      Int
  payment_id   Int
  total        Int
  status       OrderStatus
  created_at   DateTime       @default(now())
  user         User           @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  OrderHistory OrderHistory[]
}

model OrderHistory {
  id         Int      @id @default(autoincrement())
  order_id   Int      @unique
  product_id Int
  qauntity   Int
  created_at DateTime @default(now())
  order      Order    @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
